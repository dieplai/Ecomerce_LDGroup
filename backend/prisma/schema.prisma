// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// ============================================
// USER MANAGEMENT
// ============================================

model User {
  id           String    @id @default(uuid())
  email        String    @unique
  username     String    @unique
  passwordHash String    @map("password_hash")

  // Profile
  firstName String? @map("first_name")
  lastName  String? @map("last_name")
  phone     String? @unique
  avatar    String?

  // MLM Structure
  role         UserRole   @default(CUSTOMER)
  sponsorId    String?    @map("sponsor_id")
  sponsor      User?      @relation("UserSponsor", fields: [sponsorId], references: [id], onDelete: SetNull)
  downline     User[]     @relation("UserSponsor")
  referralCode String     @unique @map("referral_code")

  // Status
  status        UserStatus @default(ACTIVE)
  emailVerified Boolean    @default(false) @map("email_verified")

  // Timestamps
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @updatedAt @map("updated_at")
  lastLoginAt DateTime? @map("last_login_at")

  // Relations
  ancestorTree   UserTree[] @relation("Ancestor")
  descendantTree UserTree[] @relation("Descendant")
  orders         Order[]
  commissions    Commission[]
  withdrawals    WithdrawalRequest[]

  @@map("users")
  @@index([sponsorId])
  @@index([referralCode])
  @@index([role])
  @@index([email])
}

enum UserRole {
  ADMIN
  MANAGER
  DISTRIBUTOR
  CUSTOMER
}

enum UserStatus {
  ACTIVE
  INACTIVE
  SUSPENDED
  BANNED
}

// MLM Tree - Closure Table for efficient tree queries
model UserTree {
  ancestor   String
  descendant String
  level      Int    @default(0)

  ancestorUser   User @relation("Ancestor", fields: [ancestor], references: [id], onDelete: Cascade)
  descendantUser User @relation("Descendant", fields: [descendant], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now()) @map("created_at")

  @@id([ancestor, descendant])
  @@map("user_tree")
  @@index([ancestor, level])
  @@index([descendant])
}

// ============================================
// PRODUCT MANAGEMENT
// ============================================

model Category {
  id          String  @id @default(uuid())
  name        String
  slug        String  @unique
  description String? @db.Text

  // Tree structure
  parentId String?    @map("parent_id")
  parent   Category?  @relation("CategoryTree", fields: [parentId], references: [id], onDelete: SetNull)
  children Category[] @relation("CategoryTree")

  // Media
  image String?

  // Settings
  order  Int     @default(0)
  active Boolean @default(true)

  // Timestamps
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  // Relations
  products Product[]

  @@map("categories")
  @@index([slug])
  @@index([parentId])
  @@index([active])
}

model Product {
  id          String  @id @default(uuid())
  name        String
  slug        String  @unique
  description String? @db.Text

  // Pricing
  price     Decimal  @db.Decimal(10, 2)
  costPrice Decimal? @map("cost_price") @db.Decimal(10, 2)
  salePrice Decimal? @map("sale_price") @db.Decimal(10, 2)

  // Inventory
  sku               String @unique
  stock             Int    @default(0)
  lowStockThreshold Int    @default(10) @map("low_stock_threshold")

  // Commission
  isCommissionEligible Boolean @default(true) @map("is_commission_eligible")

  // Media
  images    Json?    @db.Json  // Store as JSON array
  thumbnail String?

  // Category
  categoryId String?   @map("category_id")
  category   Category? @relation(fields: [categoryId], references: [id], onDelete: SetNull)

  // Status
  status ProductStatus @default(DRAFT)

  // SEO
  metaTitle       String? @map("meta_title")
  metaDescription String? @map("meta_description") @db.Text

  // Timestamps
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  // Relations
  orderItems OrderItem[]

  @@map("products")
  @@index([slug])
  @@index([categoryId])
  @@index([status])
  @@index([sku])
}

enum ProductStatus {
  DRAFT
  PUBLISHED
  OUT_OF_STOCK
  DISCONTINUED
}

// ============================================
// ORDER MANAGEMENT
// ============================================

model Order {
  id          String @id @default(uuid())
  orderNumber String @unique @map("order_number")

  // Customer
  userId String @map("user_id")
  user   User   @relation(fields: [userId], references: [id], onDelete: Restrict)

  // Pricing
  subtotal    Decimal @db.Decimal(10, 2)
  shippingFee Decimal @default(0) @map("shipping_fee") @db.Decimal(10, 2)
  tax         Decimal @default(0) @db.Decimal(10, 2)
  discount    Decimal @default(0) @db.Decimal(10, 2)
  totalAmount Decimal @map("total_amount") @db.Decimal(10, 2)

  // Status
  status        OrderStatus   @default(PENDING)
  paymentStatus PaymentStatus @default(PENDING) @map("payment_status")

  // Shipping
  shippingAddress Json?   @map("shipping_address")
  shippingMethod  String? @map("shipping_method")
  trackingNumber  String? @map("tracking_number")

  // Payment
  paymentMethod  String?   @map("payment_method")
  paymentGateway String?   @map("payment_gateway")
  transactionId  String?   @map("transaction_id")
  paidAt         DateTime? @map("paid_at")

  // Notes
  customerNote String? @map("customer_note") @db.Text
  adminNote    String? @map("admin_note") @db.Text

  // Timestamps
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @updatedAt @map("updated_at")
  completedAt DateTime? @map("completed_at")
  cancelledAt DateTime? @map("cancelled_at")

  // Relations
  items       OrderItem[]
  commissions Commission[]

  @@map("orders")
  @@index([userId])
  @@index([status])
  @@index([orderNumber])
  @@index([createdAt])
}

enum OrderStatus {
  PENDING
  CONFIRMED
  PROCESSING
  SHIPPED
  COMPLETED
  DELIVERED
  CANCELLED
  REFUNDED
}

enum PaymentStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
  REFUNDED
}

model OrderItem {
  id String @id @default(uuid())

  // Order
  orderId String @map("order_id")
  order   Order  @relation(fields: [orderId], references: [id], onDelete: Cascade)

  // Product
  productId String  @map("product_id")
  product   Product @relation(fields: [productId], references: [id], onDelete: Restrict)

  // Details
  quantity Int
  price    Decimal @db.Decimal(10, 2) // Price at time of purchase
  subtotal Decimal @db.Decimal(10, 2) // quantity * price

  // Timestamps
  createdAt DateTime @default(now()) @map("created_at")

  @@map("order_items")
  @@index([orderId])
  @@index([productId])
}

// ============================================
// COMMISSION MANAGEMENT
// ============================================

model CommissionConfig {
  id    String @id @default(uuid())
  level Int    @unique // 1, 2, 3, 4

  // Commission settings
  commissionRate Decimal @map("commission_rate") @db.Decimal(5, 2) // e.g., 10.00 for 10%
  commissionType String  @default("PERCENTAGE") @map("commission_type")

  // Constraints
  minOrderValue Decimal? @map("min_order_value") @db.Decimal(10, 2)
  maxCommission Decimal? @map("max_commission") @db.Decimal(10, 2)

  // Status
  active        Boolean   @default(true)
  effectiveFrom DateTime  @default(now()) @map("effective_from")
  effectiveTo   DateTime? @map("effective_to")

  // Timestamps
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("commission_configs")
  @@index([level, active])
}

model Commission {
  id String @id @default(uuid())

  // User receiving commission
  userId String @map("user_id")
  user   User   @relation(fields: [userId], references: [id], onDelete: Restrict)

  // Order that generated commission
  orderId String @map("order_id")
  order   Order  @relation(fields: [orderId], references: [id], onDelete: Restrict)

  // Downline user who made the purchase
  fromUserId String @map("from_user_id")

  // MLM Level (1=F1, 2=F2, 3=F3, 4=F4)
  level Int

  // Calculation
  orderValue       Decimal @map("order_value") @db.Decimal(10, 2)
  commissionRate   Decimal @map("commission_rate") @db.Decimal(5, 2)
  commissionAmount Decimal @map("commission_amount") @db.Decimal(10, 2)

  // Period (format: YYYY-MM)
  period String

  // Status
  status CommissionStatus @default(PENDING)

  // Notes
  notes String? @db.Text

  // Timestamps
  calculatedAt DateTime  @default(now()) @map("calculated_at")
  approvedAt   DateTime? @map("approved_at")
  rejectedAt   DateTime? @map("rejected_at")
  paidAt       DateTime? @map("paid_at")

  @@map("commissions")
  @@index([userId, period])
  @@index([orderId])
  @@index([status])
  @@index([period])
  @@index([fromUserId])
}

enum CommissionStatus {
  PENDING
  APPROVED
  REJECTED
  PAID
  CANCELLED
}

model WithdrawalRequest {
  id String @id @default(uuid())

  // User requesting withdrawal
  userId String @map("user_id")
  user   User   @relation(fields: [userId], references: [id], onDelete: Restrict)

  // Amount
  amount Decimal @db.Decimal(10, 2)

  // Bank information (stored as JSON)
  bankInfo Json @map("bank_info")
  // Example: { "bankName": "Vietcombank", "accountNumber": "0123456789", "accountName": "NGUYEN VAN A", "branch": "HCM" }

  // Commission IDs being withdrawn (stored as JSON array)
  commissionIds Json @map("commission_ids") @db.Json
  // Example: ["uuid1", "uuid2", "uuid3"]

  // Status
  status WithdrawalStatus @default(PENDING)

  // Processing
  processedBy String?   @map("processed_by")
  processedAt DateTime? @map("processed_at")

  // Notes
  userNote  String? @map("user_note") @db.Text
  adminNote String? @map("admin_note") @db.Text

  // Timestamps
  requestedAt DateTime @default(now()) @map("requested_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  @@map("withdrawal_requests")
  @@index([userId])
  @@index([status])
  @@index([requestedAt])
}

enum WithdrawalStatus {
  PENDING
  APPROVED
  REJECTED
  PROCESSING
  COMPLETED
  FAILED
}
